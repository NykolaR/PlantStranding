[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=14]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
}

uniform sampler2D DitherMap;
uniform float DitherStrength = 0.1;
uniform float ColorDepth = 3.0;

void light() {
	float light = max(0.0, dot(NORMAL, LIGHT)) * ATTENUATION.r;
	vec2 ts = vec2(textureSize(DitherMap, 0));
	vec2 uv = mod(floor(FRAGCOORD.xy), ts) / ts;
	light += (texture(DitherMap, uv).r - 0.5) * DitherStrength;
	light = round(light * ColorDepth) / ColorDepth;
	DIFFUSE_LIGHT += light * ALBEDO * LIGHT_COLOR;
}"

[sub_resource type="OpenSimplexNoise" id=16]
seed = 1839
octaves = 9
period = 0.7
persistence = 0.371

[sub_resource type="NoiseTexture" id=17]
flags = 0
width = 4
height = 4
seamless = true
noise = SubResource( 16 )

[resource]
shader = SubResource( 14 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/DitherStrength = 0.2
shader_param/ColorDepth = 10.0
shader_param/DitherMap = SubResource( 17 )
